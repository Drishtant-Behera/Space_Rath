import pygameimport pygame.freetypeimport sysimport mathimport randompygame.init()display = pygame.display.set_mode((1750, 950))clock = pygame.time.Clock()global ConstantStateConstantState = pygame.image.load("pixil-frame-0 (2).png")global player_walkLEFTRIGHT_imagesplayer_walkLEFTRIGHT_images = [pygame.image.load("pixil-frame-0 (3).png"),                               pygame.image.load("pixil-frame-0 (4).png"),                               pygame.image.load("pixil-frame-0 (3).png"),                               pygame.image.load("pixil-frame-0 (4).png")]global player_walkUPDOWN_imagesplayer_walkUPDOWN_images = [pygame.image.load("pixil-frame-0 (1).png"), pygame.image.load("pixil-frame-0 (2).png"),                            pygame.image.load("pixil-frame-0 (1).png"), pygame.image.load("pixil-frame-0 (2).png")]global player_weaponplayer_weapon = pygame.image.load("OriginOrbWeppon.png")player_weapon = pygame.transform.scale(player_weapon, (16, 16))display = pygame.display.set_mode((1750, 950))clock = pygame.time.Clock()DefaultImage = pygame.image.load("pixil-frame-0 (2).png")player_walkLEFTRIGHT_images = [pygame.image.load("pixil-frame-0 (3).png"), pygame.image.load("pixil-frame-0 (4).png"),                               pygame.image.load("pixil-frame-0 (3).png"), pygame.image.load("pixil-frame-0 (4).png")]player_walkDOWN_images = [pygame.image.load("pixil-frame-0 (1).png"), pygame.image.load("pixil-frame-0 (2).png"),                          pygame.image.load("pixil-frame-0 (1).png"), pygame.image.load("pixil-frame-0 (2).png")]player_weapon = pygame.image.load("OriginOrbWeppon.png")player_weapon = pygame.transform.scale(player_weapon, (16, 16))class Player:    def __init__(self, x, y, width, height):        self.x = x        self.y = y        self.width = width        self.height = height        self.animation_count = 0        self.moving_right = False        self.moving_left = False        self.moving_up = False        self.moving_down = False        self.current_health = 200        self.target_health = 500        self.max_health = 2000        self.health_bar_length = 400        self.health_ratio = self.max_health / self.health_bar_length        self.health_change_speed = 5        self.current_mana = 200        self.target_mana = 500        self.max_mana = 2000        self.mana_bar_length = 400        self.mana_ratio = self.max_mana / self.mana_bar_length        self.mana_change_speed = 5        self.textX_health = 165        self.textY_health = 15        self.current_mana_STRING = str(self.current_mana)        self.max_mana_STRING = str(self.max_mana)        self.textX_mana = 165        self.textY_mana = 50        self.current_mana_STRING = str(self.current_health)        self.max_mana_STRING = str(self.max_mana)        self.TransformedImage = pygame.transform.scale(player_walkLEFTRIGHT_images[self.animation_count // 4],                                                       (self.width, self.height))        self.PlayerHitbox = self.TransformedImage.get_rect()    def get_damage(self, amount):        if self.target_health > 0:            self.target_health -= amount        if self.target_health < 0:            self.target_health = 0    def get_health(self, amount):        if self.target_health < self.max_health:            self.target_health += amount        if self.target_health > self.max_health:            self.target_health = self.max_health    def advanced_health(self):        transition_width = 0        transition_color = (255, 0, 0)        if self.current_health < self.target_health:            self.current_health += self.health_change_speed            transition_width = int((self.target_health - self.current_health) / self.health_ratio)            transition_color = (255, 255, 0)        if self.current_health > self.target_health:            self.current_health -= self.health_change_speed            transition_width = int((self.target_health - self.current_health) / self.health_ratio)            transition_color = (255, 255, 0)        health_bar_width = int(self.current_health / self.health_ratio)        health_bar = pygame.Rect(10, 10, health_bar_width, 25)        transition_bar = pygame.Rect(health_bar.right, 10, transition_width, 25)        pygame.draw.rect(display, (255, 0, 0), health_bar)        pygame.draw.rect(display, transition_color, transition_bar)        pygame.draw.rect(display, (255, 255, 255), (10, 10, self.health_bar_length, 25), 4)    def mana_regeneration(self):        if self.target_mana < self.max_mana:            self.target_mana += 0.3        if self.target_mana > self.max_mana:            self.target_mana = self.max_mana    def mana_usage(self, amount):        if self.target_mana > 0:            self.target_mana -= amount        if self.target_mana < 0:            self.target_mana = 0    def mana_get(self, amount):        if self.target_mana < self.max_mana:            self.target_mana += amount        if self.target_mana > self.max_mana:            self.target_mana = self.max_mana    def advanced_mana(self):        transition_width = 0        transition_color = (137, 207, 240)        if self.current_mana < self.target_mana:            self.current_mana += self.mana_change_speed            transition_width = int((self.target_mana - self.current_mana) / self.mana_ratio)            transition_color = (137, 207, 240)        if self.current_mana > self.target_mana:            self.current_mana -= self.mana_change_speed            transition_width = int((self.target_mana - self.current_mana) / self.mana_ratio)            transition_color = (137, 207, 240)        mana_bar_width = int(self.current_mana / self.mana_ratio)        mana_bar = pygame.Rect(10, 45, mana_bar_width, 25)        transition_bar = pygame.Rect(mana_bar.right, 45, transition_width, 25)        pygame.draw.rect(display, (0, 127, 255), mana_bar)        pygame.draw.rect(display, transition_color, transition_bar)        pygame.draw.rect(display, (255, 255, 255), (10, 45, self.mana_bar_length, 25), 4)    def handle_weapons(self, display):        mouse_x, mouse_y = pygame.mouse.get_pos()        rel_x, rel_y = mouse_x - player.x, mouse_y - player.y        angle = (360 / math.pi) * -math.atan2(rel_y, rel_x)        player_weapon_copy = pygame.transform.rotate(player_weapon, angle)        display.blit(player_weapon_copy, (            self.x + 15 - int(player_weapon_copy.get_width() / 2),            self.y + 25 - int(player_weapon_copy.get_height() / 2)))    def main(self, display):        if self.animation_count + 1 >= 16:            self.animation_count = 0        self.animation_count += 1        if self.moving_right:            display.blit(pygame.transform.scale(player_walkLEFTRIGHT_images[self.animation_count // 4], (32, 42)),                         (self.x, self.y))        elif self.moving_left:            display.blit(pygame.transform.scale(                pygame.transform.flip(player_walkLEFTRIGHT_images[self.animation_count // 4], True, False), (32, 42)),                (self.x, self.y))        elif self.moving_down:            display.blit(pygame.transform.scale(player_walkDOWN_images[self.animation_count // 4], (32, 42)),                         (self.x, self.y))        elif self.moving_up:            display.blit(pygame.transform.scale(player_walkDOWN_images[self.animation_count // 4], (32, 42)),                         (self.x, self.y))        else:            display.blit(pygame.transform.scale(pygame.image.load("ConstantState.png"), (32, 42)), (self.x, self.y))        self.handle_weapons(display)        self.moving_right = False        self.moving_left = False    def ShowText_Stats(self, HealthCordsX, HealthCordsY, ManaCordsX, ManaCordsY, TextSize, colorHealth, colorMana):        self.font = pygame.font.Font('alagard.ttf', TextSize)        current_health_STRING = str(self.current_health)        max_health_STRING = str(self.max_health)        stat_health = self.font.render((current_health_STRING + " / " + max_health_STRING), True, (colorHealth))        display.blit(stat_health, (HealthCordsX, HealthCordsY))        current_mana_STRING = str(self.current_mana)        max_mana_STRING = str(self.max_mana)        stat_mana = self.font.render((current_mana_STRING + " / " + max_mana_STRING), True, (colorMana))        display.blit(stat_mana, (ManaCordsX, ManaCordsY))    def HitBox(self, EnemyHitboxCords, HitboxMain, HitboxSecondary_X, HitboxSecondary_Y):        pygame.draw.rect(display, (24, 123, 205), self.PlayerHitbox, 2)        self.PlayerHitbox[0] = self.x        self.PlayerHitbox[1] = self.y        if self.PlayerHitbox.colliderect(EnemyHitboxCords):            player.get_damage(2)        if self.PlayerHitbox.colliderect(HitboxMain):            player.get_damage(2)        if self.PlayerHitbox.colliderect(HitboxSecondary_X):            player.get_damage(2)        if self.PlayerHitbox.colliderect(HitboxSecondary_Y):            player.get_damage(2)player = Player(843, 443, 32, 42)